Linking JRAuthenticate
To link the JRAuthenticate library in your XCode project, please follow the instructions found here:http://www.clintharris.net/2009/iphone-app-shared-libraries/

You must also copy the resources found in the Resources folder of the JRAuthenticate project into your project.

Also, the library uses sbrautaset's json-framework library found at http://code.google.com/p/json-framework/.

Our library follows Option 2 of the installation instructions included in the json SDK, posted below:

[code]
Option 2: Use the iPhone Custom SDK

    1)    Create a directory ~/Library/SDKs/, if it does not already exist.
    2)    Copy the SDKs/JSON folder from this disk image into the directory you just created.
    3)    In your Project, select your target in the left-hand menu and click the blue Info button (Apple-i) and select the "Build" tab.
    4)    Make sure "All Configurations" is selected in the "Configuration" drop-down.
    5)    Add the following new line to the "Additional SDKs" option: $HOME/Library/SDKs/JSON/${PLATFORM_NAME}.sdk
    6)    Add the following two options to the "Other Linker Flags" option: -ObjC -ljson
    7)    Use '#import <JSON/JSON.h>' in your source files.
[/code]

You must download and install the json library for the libJRAuthenticate to work.  You should configure your project's "Additional SDKs" option to point to the install location of the json library.  If you installed the library somewhere other than your $HOME directory, please make sure that you change the path variable for "Additional SDKs" in both the JRAuthenticate project as well as your project. 

Do not include the "-ljson" option for "Other Linker Flags" in your project.  Instead, you must add the option "-all_load" due to a bug in the linker for device builds only.  If you don't, when the library tries to reference a method in the json library, it will work on the simulator but crash your app on the device.

Using JRAuthenticate
Make sure you import the JRAuthenticate headers:

	#import "JRAuthenticate.h"

Go to your application's dashboard on rpxnow to find your 20-character Application ID.  To instantiate an instance of the JRAuthenticate library, you can store the Application ID as an NSString and pass it to the class method initWithAppID.  Make sure that your delegate class implements the JRAuthenticateDelegate protocol.


	static NSString *appId = @"appcfamhnpkagijaeinl";
	...
	JRAuthenticate*  jrAuthenticate = [[JRAuthenticate initWithAppID:appId andTokenUrl:tokenUrl delegate:self] retain];


In the section of code where you wish to launch the library's authentication process, send the showJRAuthenticateDialog message from your JRAuthenticate object:

    [jrAuthenticate showJRAuthenticateDialog];

After the user authenticates with the provider, the JRAuthenticate library will post the - (void)jrAuthenticate:(JRAuthenticate*)jrAuth didReceiveToken:(NSString*)token message to your delegate, containing the session token for the user. 

If you provide the initWithAppID function with a token URL, the library will post the didReceiveToken: message to your delegate and then continue to post the token to the token URL that was provided.  It is here that you should make the call to auth_info with your Application Key.  After the JRAuthenticate library receives a response from the token URL, it will send the - (void)jrAuthenticate:(JRAuthenticate*)jrAuth didReachTokenURL:(NSString*)tokenUrlPayload message to your delegate with the contents of that response.  It is your application's responsibility to parse the response for the user's information.  We recommend that you make at least one token URL specific to your mobile application, and have its response contain only the information your iPhone application needs.

Unlike the RPX web-based widget, the library will not redirect the user to the token URL.  Instead, it will close the view controller containing the web view, and perform the action of posting the token to the token URL headlessly.

If you did not instantiate the library with a token URL, the library will remove it's view controller at this point, and it is your responsibility to post the token to your token URL and process the response.

Whether the JRAuthenticate posts the token to the token URL or your application does, your token URL should be making the call to auth_info with your 40-character Application Key.  Your iPhone application should not contain the Application Key.   

If there were any problems authenticating, or if the user canceled the authentication, the didFailWithError: or the didNotCompleteAuthentication method may be called instead of the didReceiveToken: function.